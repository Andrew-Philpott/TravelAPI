// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelApi.Models;

namespace travelapi.Migrations
{
    [DbContext(typeof(TravelApiContext))]
    [Migration("20200402232359_Initialfix")]
    partial class Initialfix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TravelApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("TravelApi.Models.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            DestinationId = 1,
                            City = "Venice",
                            Country = "Italy"
                        },
                        new
                        {
                            DestinationId = 2,
                            City = "Madrid",
                            Country = "Spain"
                        },
                        new
                        {
                            DestinationId = 3,
                            City = "Berlin",
                            Country = "Germany"
                        },
                        new
                        {
                            DestinationId = 4,
                            City = "Lagos",
                            Country = "Nigeria"
                        },
                        new
                        {
                            DestinationId = 5,
                            City = "Washington",
                            Country = "United States"
                        },
                        new
                        {
                            DestinationId = 6,
                            City = "Paris",
                            Country = "France"
                        },
                        new
                        {
                            DestinationId = 7,
                            City = "Paris",
                            Country = "United States"
                        },
                        new
                        {
                            DestinationId = 8,
                            City = "Berlin",
                            Country = "United States"
                        },
                        new
                        {
                            DestinationId = 9,
                            City = "Kyiv",
                            Country = "Ukraine"
                        });
                });

            modelBuilder.Entity("TravelApi.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ReviewId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Description = "Awesome place",
                            DestinationId = 1,
                            Rating = 5,
                            ReviewerName = "Andriy"
                        },
                        new
                        {
                            ReviewId = 2,
                            Description = "Better places",
                            DestinationId = 2,
                            Rating = 3,
                            ReviewerName = "Andriy"
                        },
                        new
                        {
                            ReviewId = 3,
                            Description = "Great except for...",
                            DestinationId = 3,
                            Rating = 4,
                            ReviewerName = "Andrew"
                        },
                        new
                        {
                            ReviewId = 4,
                            Description = "Awesome place",
                            DestinationId = 3,
                            Rating = 4,
                            ReviewerName = "Andrew"
                        },
                        new
                        {
                            ReviewId = 5,
                            Description = "Awesome place",
                            DestinationId = 4,
                            Rating = 5,
                            ReviewerName = "Andriy"
                        },
                        new
                        {
                            ReviewId = 6,
                            Description = "A lot of museums",
                            DestinationId = 5,
                            Rating = 4,
                            ReviewerName = "Andriy"
                        },
                        new
                        {
                            ReviewId = 7,
                            Description = "City with great history",
                            DestinationId = 5,
                            Rating = 5,
                            ReviewerName = "Adela"
                        },
                        new
                        {
                            ReviewId = 8,
                            Description = "Weather could be better",
                            DestinationId = 1,
                            Rating = 4,
                            ReviewerName = "Krista"
                        },
                        new
                        {
                            ReviewId = 9,
                            Description = "Nice place to live",
                            DestinationId = 5,
                            Rating = 4,
                            ReviewerName = "Tiffany"
                        },
                        new
                        {
                            ReviewId = 10,
                            Description = "Missing California",
                            DestinationId = 5,
                            Rating = 3,
                            ReviewerName = "Steven"
                        },
                        new
                        {
                            ReviewId = 11,
                            Description = "Far from ocean",
                            DestinationId = 5,
                            Rating = 2,
                            ReviewerName = "Jack"
                        },
                        new
                        {
                            ReviewId = 12,
                            Description = "Best city in Texas",
                            DestinationId = 7,
                            Rating = 4,
                            ReviewerName = "Jiwon"
                        },
                        new
                        {
                            ReviewId = 13,
                            Description = "Actually we call it New Berlin",
                            DestinationId = 8,
                            Rating = 3,
                            ReviewerName = "Leilani"
                        });
                });

            modelBuilder.Entity("TravelApi.Models.Destination", b =>
                {
                    b.HasOne("TravelApi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TravelApi.Models.Review", b =>
                {
                    b.HasOne("TravelApi.Models.Destination", "Destination")
                        .WithMany("Reviews")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelApi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
